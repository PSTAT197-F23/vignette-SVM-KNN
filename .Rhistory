getwd()
data_dir <- root_dir+'/data'
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
root_dir <- getwd()
data_dir <- root_dir+'/data'
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
root_dir <- rprojroot::find_rstudio_root_file()
data_dir <- file.path(root_dir, "data")
scripts_dir <- file.path(root_dir, "scripts")
results_dir <- file.path(root_dir, "results")
setwd(data_dir)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
root_dir <- rprojroot::find_rstudio_root_file()
data_dir <- file.path(root_dir, "data")
scripts_dir <- file.path(root_dir, "scripts")
results_dir <- file.path(root_dir, "results")
setwd(data_dir)
heart <- read.csv("heart.csv")
?read.csv
setwd(data_dir)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
root_dir <- rprojroot::find_rstudio_root_file()
data_dir <- file.path(root_dir, "data")
scripts_dir <- file.path(root_dir, "scripts")
results_dir <- file.path(root_dir, "results")
setwd(data_dir)
heart <- read.csv("heart.csv")
view(heart)
save(heart,'heart.RData')
save(heart,'heart.rda')
save(heart)
save(heart,'heart.Rda')
save(heart,file = 'heart.rda')
rm(heart)
#heart <- read.csv("heart.csv")
#save(heart,file = 'heart.rda')
load(heart.rda)
#heart <- read.csv("heart.csv")
#save(heart,file = 'heart.rda')
load('heart.rda')
heart %>%
head()
sum(is.na(heart))
heart <- heart %>%
dplyr::mutate(gender = case_when(sex == "0" ~ "Female", sex == "1" ~ "Male"),
output = case_when(output == "0" ~ "No", output == "1" ~ "Yes"),
gender = factor(gender),
cp = factor(cp),
fbs = factor(fbs),
restecg = factor(restecg),
exng = factor(exng),
caa = factor(caa),
thall = factor(thall),
output = factor(output),
sex = factor(sex),
slp = factor(slp),
age_class = cut(age, breaks = seq(25, 80, by = 5))
)
heart %>%
summary
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart[,]),
order = "AOE",
method = "number")
setwd(data_dir)
#heart <- read.csv("heart.csv")
#save(heart,file = 'heart.rda')
load('heart.rda')
heart_num <- heart
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
heart <- heart %>%
dplyr::mutate(gender = case_when(sex == "0" ~ "Female", sex == "1" ~ "Male"),
output = case_when(output == "0" ~ "No", output == "1" ~ "Yes"),
gender = factor(gender),
cp = factor(cp),
fbs = factor(fbs),
restecg = factor(restecg),
exng = factor(exng),
caa = factor(caa),
thall = factor(thall),
output = factor(output),
sex = factor(sex),
slp = factor(slp),
age_class = cut(age, breaks = seq(25, 80, by = 5))
)
heart %>%
summary
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(corr(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
graph_corr <- corrplot(cor(heart_num[,], use="pairwise.complete.obs"),
order = "AOE",
method = "number")
rm(heart)
rm(heart_num)
#heart <- read.csv("heart.csv")
#save(heart,file = 'heart.rda')
load('heart.rda')
heart_num <- heart
graph_corr <- corrplot(cor(heart_num[,]),
order = "AOE",
method = "number")
ggplot(heart, aes(x=age_class, fill = output, color = output)) +
geom_bar(position = "dodge", alpha=0.5) +
theme(legend.position = "top") +
labs(title = "Age vs. Heart Disease",
x = "Age", y = "Number of People")
heart <- heart %>%
dplyr::mutate(gender = case_when(sex == "0" ~ "Female", sex == "1" ~ "Male"),
output = case_when(output == "0" ~ "No", output == "1" ~ "Yes"),
gender = factor(gender),
cp = factor(cp),
fbs = factor(fbs),
restecg = factor(restecg),
exng = factor(exng),
caa = factor(caa),
thall = factor(thall),
output = factor(output),
sex = factor(sex),
slp = factor(slp),
age_class = cut(age, breaks = seq(25, 80, by = 5))
)
heart %>%
summary
ggplot(heart, aes(x=age_class, fill = output, color = output)) +
geom_bar(position = "dodge", alpha=0.5) +
theme(legend.position = "top") +
labs(title = "Age vs. Heart Disease",
x = "Age", y = "Number of People")
ggplot(heart, aes(x=age_class, fill = output, color = output)) +
geom_bar(position = "fill", alpha=0.5) +
theme(legend.position = "top") +
labs(title = "Age vs. Heart Disease",
x = "Age", y = "Number of People")
ggplot(heart, aes(x=age)) +
geom_bar(position = "dodge", alpha=0.5) +
theme(legend.position = "top")+
labs(title = "Age Distibution",
x = "Age", y = "Number of People")
load(file.path(data_dir,'heart.rda'))
rm(heart)
load(file.path(data_dir,'heart.rda'))
?ggballonplot
??ggballonplot
?
3
??grid.arrange
knitr::opts_chunk$set(echo = TRUE)
#Load the packages
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(caret)
library(caTools)
library(knitr)
# set global chunk options: images will be 7x5 inches
knitr::opts_chunk$set(fig.width=7, fig.height=5)
options(digits = 4)
# debug latex
options(tinytex.verbose = TRUE)
#Load neccessary libraries and the dataset
library(xgboost)
library(rsample)
library(caret)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(caTools)
setwd("C:/Users/molat/OneDrive/Documents/GitHub/vignette-binary-logistic-regression")
load("data/heart.rda")
library(knitr)
# set global chunk options: images will be 7x5 inches
knitr::opts_chunk$set(fig.width=7, fig.height=5)
options(digits = 4)
# debug latex
options(tinytex.verbose = TRUE)
#classify the variables into categorical and numerical variables
#select the numerical variables
numeric_var <-heart %>%
select("age","trtbps","chol","thalachh","oldpeak")
#select the categorical values
categorical_var<- heart %>%
select("sex","cp","fbs","restecg","exng","slp","caa",
"thall","output")%>%
mutate_if(is.numeric, as.factor)
#combine the categorical  and numerical values
dataset1 = cbind(categorical_var,numeric_var)
head(dataset1)
outliers <- function(x) {
#IQR
Q1 <- quantile(x, probs=.25)
Q3 <- quantile(x, probs=.75)
iqr = Q3-Q1
#Upper Range
upper_limit = Q3 + (iqr*1.5)
#Lower Range Eliminating Outliers
lower_limit = Q1 - (iqr*1.5)
x > upper_limit | x < lower_limit
}
# remove the outliers
remove_outliers <- function(df_outliers, cols = names(df_outliers)) {
for (col in cols) {
df_outliers<- df_outliers[!outliers(df_outliers[[col]]),]
}
df_outliers
}
# we have removed the outliers from the selected features
# create new dataset without outliers
dataset2<-remove_outliers(dataset1,c("trtbps","oldpeak" ,"thalachh", "chol"))
set.seed(100)
#create the subsets for sizes
subsets <- c(1:8,10,13)
# define the control using random forest selection
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 5,
number = 10,
verbose = FALSE)
#run the RFE
results <- rfe(x=dataset2[, c(1:8,10:14)], y=dataset2$output,
sizes = subsets,
rfeControl = ctrl)
# Print the selected features
print(predictors(results))
set.seed(100)
varimp_data <- data.frame(feature = row.names(varImp(results))[1:9],
importance = varImp(results)[1:9, 1])
ggplot(data = varimp_data,
aes(x = reorder(feature, -importance), y = importance, fill = feature)) +
geom_bar(stat="identity") + labs(x = "Features", y = "Variable Importance") +
geom_text(aes(label = round(importance, 2)), vjust=1.6, color="white", size=4) +
theme_bw() + theme(legend.position = "none")
set.seed(100)
data1 <- dataset2 %>%
select(predictors(results), "output")
head(data1)
set.seed(100)
intrain <- createDataPartition(y = data1$output, p= 0.7, list = FALSE)
training <- heart[intrain,]
testing <- heart[-intrain,]
training[["output"]] = factor(training[["output"]])
head(training)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Linear <- train(output ~., data = training, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_Linear
test_pred <- predict(svm_Linear, newdata = testing)
test_pred
cm = caret::confusionMatrix(table(test_pred, testing$output))
cm$table
cm <- confusionMatrix(table(test_pred, testing$output))
plt <- as.data.frame(cm$table)
plt$Prediction <- factor(plt$test_pred, levels=rev(levels(plt$test_pred)))
ggplot(plt, aes(Prediction,Var2, fill= Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Reference",y = "Prediction") +
scale_x_discrete(labels=c("Class_1","Class_0")) +
scale_y_discrete(labels=c("Class_0","Class_1"))
set.seed(100)
varimp_data <- data.frame(feature = row.names(varImp(results))[1:9],
importance = varImp(results)[1:9, 1])
ggplot(data = varimp_data,
aes(x = reorder(feature, -importance), y = importance, fill = feature)) +
geom_bar(stat="identity") + labs(x = "Features", y = "Variable Importance") +
geom_text(aes(label = round(importance, 2)), vjust=1.6, color="white", size=4) +
theme_bw() + theme(legend.position = "none")
set.seed(100)
data1 <- dataset2 %>%
select(predictors(results), "output")
intrain <- createDataPartition(y = data1$output, p= 0.7, list = FALSE)
training <- heart[intrain,]
testing <- heart[-intrain,]
training[["output"]] = factor(training[["output"]])
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Linear <- train(output ~., data = training, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_Linear
test_pred <- predict(svm_Linear, newdata = testing)
test_pred
cm = caret::confusionMatrix(table(test_pred, testing$output))
cm$table
cm <- confusionMatrix(table(test_pred, testing$output))
plt <- as.data.frame(cm$table)
plt$Prediction <- factor(plt$test_pred, levels=rev(levels(plt$test_pred)))
ggplot(plt, aes(Prediction,Var2, fill= Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Reference",y = "Prediction") +
scale_x_discrete(labels=c("Class_1","Class_0")) +
scale_y_discrete(labels=c("Class_0","Class_1"))
set.seed(3435)
predictions <- predict(final.m, newdata = test_x)
set.seed(3435)
final.m = xgb.train(params = param_list, data = xgb_train, nrounds = 425, verbose = 0)
heart$cp <- as.factor(heart$cp)
heart$fbs <- as.factor(heart$fbs)
heart$restecg <- as.factor(heart$restecg)
heart$exng <- as.factor(heart$exng)
heart$caa <- as.factor(heart$caa)
heart$thall <- as.factor(heart$thall)
heart$sex <- as.factor(heart$sex)
heart$slp <- as.factor(heart$slp)
set.seed(3435)
heart_split <- initial_split(heart, strata = output, prop = 0.8)
heart_train <- training(heart_split)
heart_test <- testing(heart_split)
train_x <- data.matrix(heart_train[, -14])
train_y <- heart_train[,14]
test_x = data.matrix(heart_test[, -14])
test_y = heart_test[, 14]
xgb_train = xgb.DMatrix(data = train_x, label = train_y)
xgb_test = xgb.DMatrix(data = test_x, label = test_y)
param_list = list(
booster = 'gbtree',
objective = "binary:logistic",
eta = 0.01,
gamma = 1,
max_depth = 6,
subsample = 0.8,
colsample_bytree = 0.5
)
xgbcv = xgb.cv(params = param_list,
data = xgb_train,
nrounds = 500,
nfold = 5,
print_every_n = 10,
early_stopping_rounds = 30,
maximize = F)
set.seed(3435)
final.m = xgb.train(params = param_list, data = xgb_train, nrounds = 425, verbose = 0)
var_imp = xgb.importance(
feature_names = setdiff(names(train),
c("output")),
model = final.m)
blue_palette <- colorRampPalette(c("lightblue", "darkblue"))(length(heart) -1)
xgb.plot.importance(var_imp, col = blue_palette)
set.seed(3435)
predictions <- predict(final.m, newdata = test_x)
predictions <- as.numeric(predictions > 0.5)
conf_matrix <- confusionMatrix(as.factor(predictions), as.factor(test_y))
conf_matrix
testframe <- as.data.frame(conf_matrix$table)
testframe$Prediction <- factor(testframe$Prediction, levels=rev(levels(testframe$Prediction)))
set.seed(100)
#create the subsets for sizes
subsets <- c(1:8,10,13)
# define the control using random forest selection
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 5,
number = 10,
verbose = FALSE)
#run the RFE
results <- rfe(x=dataset2[, c(1:8,10:14)], y=dataset2$output,
sizes = subsets,
rfeControl = ctrl)
# Print the selected features
print(predictors(results))
set.seed(100)
varimp_data <- data.frame(feature = row.names(varImp(results))[1:9],
importance = varImp(results)[1:9, 1])
ggplot(data = varimp_data,
aes(x = reorder(feature, -importance), y = importance, fill = feature)) +
geom_bar(stat="identity") + labs(x = "Features", y = "Variable Importance") +
geom_text(aes(label = round(importance, 2)), vjust=1.6, color="white", size=4) +
theme_bw() + theme(legend.position = "none")
set.seed(100)
data1 <- dataset2 %>%
select(predictors(results), "output")
intrain <- createDataPartition(y = data1$output, p= 0.7, list = FALSE)
training <- heart[intrain,]
testing <- heart[-intrain,]
training[["output"]] = factor(training[["output"]])
set.seed(100)
data1 <- dataset2 %>%
select(predictors(results), "output")
intrain <- createDataPartition(y = data1$output, p= 0.7, list = FALSE)
training <- heart[intrain,]
testing <- heart[-intrain,]
training[["output"]] = factor(training[["output"]])
set.seed(100)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Linear <- train(output ~., data = training, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_Linear
set.seed(100)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Linear <- train(output ~., data = training, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_Linear
set.seed(100)
test_pred <- predict(svm_Linear, newdata = testing)
test_pred
cm = caret::confusionMatrix(table(test_pred, testing$output))
cm$table
cm <- confusionMatrix(table(test_pred, testing$output))
plt <- as.data.frame(cm$table)
plt$Prediction <- factor(plt$test_pred, levels=rev(levels(plt$test_pred)))
ggplot(plt, aes(Prediction,Var2, fill= Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Reference",y = "Prediction") +
scale_x_discrete(labels=c("Class_1","Class_0")) +
scale_y_discrete(labels=c("Class_0","Class_1"))
